package com.bookstore.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bookstore.demo.services.BookService;
import com.bookstore.demo.services.UserService;

import jakarta.persistence.EntityNotFoundException;

import com.bookstore.demo.exceptions.UserException;
import com.bookstore.demo.model.*;

@RestController
@RequestMapping("/api/users")
public class UserController {

	 private final UserService userService;
	 private final BookService bookService;
	
	 @Autowired
	 public UserController(UserService userService, BookService bookService) {
	     this.userService = userService;
	     this.bookService = bookService;
	 }
	
	 @GetMapping
	 public List<User> getAllUsers() {
	     return userService.getAllUsers();
	 }
	
	 @GetMapping("/{userId}")
	 public ResponseEntity<User> getUserById(@PathVariable Long userId) {
	     try {
	         User user = userService.getUserById(userId);
	         return ResponseEntity.ok(user);
	     } catch (EntityNotFoundException e) {
	         return ResponseEntity.notFound().build();
	     } catch (Exception e) {
	         throw new UserException("Erro ao obter o usu치rio com ID: " + userId, e);
	     }
	 }
	
	 @PostMapping
	 public ResponseEntity<User> addUser(@RequestBody User user) {
	     try {
	         User addedUser = userService.addUser(user);

	         List<Book> books = addedUser.getBookList();
	         if (books != null && !books.isEmpty()) {
	             for (Book book : books) {
	                 book.setUser(addedUser);
	             }
	         }

	         return ResponseEntity.ok(addedUser);
	     } catch (Exception e) {
	         throw new UserException("Erro ao adicionar um novo usu치rio", e);
	     }
	 }
	 
	 @PutMapping("/{userId}")
	 public ResponseEntity<User> updateUser(@PathVariable Long userId, @RequestBody User updatedUser) {
	     try {
	         User existingUser = userService.getUserById(userId);
	         
	         existingUser.setName(updatedUser.getName());
	         existingUser.setEmail(updatedUser.getEmail());
	         existingUser.setPassword(updatedUser.getPassword());
	         
	         User savedUser = userService.updateUser(existingUser);

	         return ResponseEntity.ok(savedUser);
	     } catch (Exception e) {
	         throw new UserException("Erro ao atualizar a lista de livros do usu치rio com ID: " + userId, e);
	     }
	 }


	
	 @DeleteMapping("/{userId}")
	 public ResponseEntity<Void> deleteUser(@PathVariable Long userId) {
	     try {
	         User delete = userService.getUserById(userId);
	         bookService.deleteChangingUserToNull(delete);
	         userService.deleteUser(userId);
	         return ResponseEntity.noContent().build();
	     } catch (EntityNotFoundException e) {
	         return ResponseEntity.notFound().build();
	     } catch (Exception e) {
	         throw new UserException("Erro ao excluir o usu치rio com ID: " + userId, e);
	     }
	 }

}
