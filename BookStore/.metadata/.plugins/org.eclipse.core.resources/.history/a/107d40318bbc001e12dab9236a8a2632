package com.bookstore.demo.controller;

import com.bookstore.demo.model.Admin;
import com.bookstore.demo.model.Book;
import com.bookstore.demo.services.AdminService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/books")
public class BookController {

    private final AdminService adminService;

    @Autowired
    public BookController(AdminService adminService) {
        this.adminService = adminService;
    }

    @GetMapping
    public List<Book> getAllBooks() {
        try {
            return adminService.getAllBooks();
        } catch (Exception e) {
            throw new RuntimeException("Erro ao obter todos os livros", e);
        }
    }

    @PostMapping
    public Book addBook(@RequestBody Book book) {
        try {
            return adminService.addBook(book);
        } catch (Exception e) {
            throw new RuntimeException("Erro ao adicionar um novo livro", e);
        }
    }

    @PutMapping("/{bookId}")
    public Book updateBook(@PathVariable Long bookId, @RequestBody Book book) {
        try {
            return adminService.updateBook(book);
        } catch (Exception e) {
            throw new RuntimeException("Erro ao atualizar o livro com ID: " + bookId, e);
        }
    }

    // Endpoint para excluir um livro
    @DeleteMapping("/{bookId}")
    public void deleteBook(@PathVariable Long bookId) {
        try {
            adminService.deleteBook(bookId);
        } catch (Exception e) {
            // Adicione lógica para lidar com exceções
            throw new RuntimeException("Erro ao excluir o livro com ID: " + bookId, e);
        }
    }

    // Exemplo adicional: Endpoint para realizar outras operações relacionadas a livros
    // ...

}
