package com.bookstore.demo.services;

import com.bookstore.demo.model.Book;
import com.bookstore.demo.repositories.BookRepository;

import jakarta.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class AdminService {

    private final BookRepository bookRepository;

    @Autowired
    public AdminService(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    public Book addBook(Book book) {
        return bookRepository.save(book);
    }

    public Book updateBook(Long bookId, Book updatedBook) {
        Optional<Book> optionalBook = bookRepository.findById(bookId);

        if (optionalBook.isPresent()) {
            Book existingBook = optionalBook.get();
            existingBook.setName(updatedBook.getName());
            existingBook.setStatus(updatedBook.isStatus());
            existingBook.setImagePath(updatedBook.getImagePath());

            return bookRepository.save(existingBook);
        } else {
            throw new EntityNotFoundException("Livro com ID " + bookId + " não encontrado.");
        }
    }

    public void deleteBook(Long bookId) {
        bookRepository.deleteById(bookId);
    }
    
    public Book updateStatus(Long bookId, boolean newStatus) {
        Optional<Book> optionalBook = bookRepository.findById(bookId);

        if (optionalBook.isPresent()) {
            Book existingBook = optionalBook.get();

            existingBook.setStatus(newStatus);

            return bookRepository.save(existingBook);
        } else {
            throw new EntityNotFoundException("Livro com ID " + bookId + " não encontrado.");
        }
    }

}
