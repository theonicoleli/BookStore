package com.bookstore.demo.controller;

import com.bookstore.demo.exceptions.BookException;
import com.bookstore.demo.model.Book;
import com.bookstore.demo.model.BookRequest;
import com.bookstore.demo.model.User;
import com.bookstore.demo.repositories.BookRepository;
import com.bookstore.demo.repositories.UserRepository;
import com.bookstore.demo.services.BookService;

import jakarta.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/books")
public class BookController {

    private final BookService bookService;
    private final BookRepository bookRepository;
    
    @Autowired
    private UserRepository userRepository;

    @Autowired
    public BookController(BookService bookService, BookRepository bookRepository) {
        this.bookService = bookService;
		this.bookRepository = bookRepository;
    }

    @GetMapping
    public List<Book> getAllBooks() {
        try {
            return bookService.getAllBooks();
        } catch (Exception e) {
            throw new BookException("Erro ao obter todos os livros", e);
        }
    }

    @PostMapping
    public ResponseEntity<Book> addBook(@RequestBody BookRequest bookRequest) {
        try {
            Book newBook = new Book();
            newBook.setName(bookRequest.getName());
            newBook.setStatus(bookRequest.isStatus());
            newBook.setImagePath(bookRequest.getImagePath());
            
        	if (bookRequest.getUserId() != null) {
                User user = userRepository.findById(bookRequest.getUserId())
                        .orElseThrow(() -> new EntityNotFoundException("User not found with id: " + bookRequest.getUserId()));
                
                newBook.setUser(user);

                if (user.getBookList() == null) {
                    user.setBooks(new ArrayList<>());
                }
                user.getBookList().add(newBook);

                userRepository.save(user);
                
        	}
        	
        	bookRepository.save(newBook);

            return new ResponseEntity<>(newBook, HttpStatus.CREATED);
        } catch (Exception e) {
        	e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @PutMapping("/{bookId}")
    public ResponseEntity<Book> updateBook(@PathVariable Long bookId, @RequestBody BookRequest bookRequest) {
        try {
        	Book newBook = new Book();
        	newBook.setId(bookId);
        	newBook.setName(bookRequest.getName());
        	newBook.setStatus(bookRequest.isStatus());
        	
        	if (bookRequest.getUserId() != null) {
                User user = userRepository.findById(bookRequest.getUserId())
                        .orElseThrow(() -> new EntityNotFoundException("User not found with id: " + bookRequest.getUserId()));
                
                newBook.setUser(user);

                if (user.getBookList() == null) {
                    user.setBooks(new ArrayList<>());
                }
                user.getBookList().add(newBook);

                userRepository.save(user);
                
        	}
            Book updated = bookService.updateBook(bookId, bookRequest);
            return ResponseEntity.ok(updated);
        } catch (Exception e) {
            throw new BookException("Erro ao atualizar o livro com ID: " + bookId, e);
        }
    }

    @DeleteMapping("/{bookId}")
    public void deleteBook(@PathVariable Long bookId) {
        try {
        	bookService.deleteBook(bookId);
        } catch (Exception e) {
            throw new BookException("Erro ao excluir o livro com ID: " + bookId, e);
        }
    }
    
    @PatchMapping("/{bookId}/status")
    public ResponseEntity<Book> updateStatus(@PathVariable Long bookId, @RequestParam boolean newStatus) {
        try {
            Book updatedBook = bookService.updateStatus(bookId, newStatus);
            return ResponseEntity.ok(updatedBook);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            throw new BookException("Erro ao atualizar o status do livro com ID: " + bookId, e);
        }
    }
}
